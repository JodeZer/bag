{{define "slice"}}

{{- range $type := .AllTypes}}

// autogen @type: {{$type.OrigType}}  @aliasPreix: {{$type.AliasType}}

type {{$type.AliasType}}Slice struct {
	raw []{{$type.OrigType}}
}

func Make{{$type.AliasType}}Slice(param ...int) *{{$type.AliasType}}Slice {
	if len(param) > 2 || len(param) == 0 {
		panic("fuck u")
	}
	p1, p2 := param[0], param[0]
	if len(param) == 2 {
		p2 = param[1]
	}
	return &{{$type.AliasType}}Slice{
		raw: make([]{{$type.OrigType}}, p1, p2),
	}
}

func Make{{$type.AliasType}}SliceFromRaw(raw []{{$type.OrigType}}) *{{$type.AliasType}}Slice {
	if raw == nil {
		raw = make([]{{$type.OrigType}}, 0)
	}
	return &{{$type.AliasType}}Slice{
		raw: raw,
	}
}

func (this *{{$type.AliasType}}Slice) Append(vals ...{{$type.OrigType}}) {
	this.raw = append(this.raw, vals...)
}

func (this *{{$type.AliasType}}Slice) AppendSlice(slice *{{$type.AliasType}}Slice) {
	slice.RangeVal(func(val {{$type.OrigType}}) {
		this.Append(val)
	})
}

func (this *{{$type.AliasType}}Slice) AppendIf(filter {{$type.AliasType}}Filter, vals ...{{$type.OrigType}}) {
	this.AppendSlice(Make{{$type.AliasType}}SliceFromRaw(vals).Filter(filter))
}

func (this *{{$type.AliasType}}Slice) Range(rangers ...{{$type.AliasType}}Ranger) {
	for _, ranger := range rangers {
		for i, val := range this.GetRaw() {
			ranger.Something()(i, val)
		}
	}
}

func (this *{{$type.AliasType}}Slice) RangeVal(rangers ...{{$type.AliasType}}ValRanger) {
	this.Range({{$type.AliasType}}ValRangerBatchTo{{$type.AliasType}}Ranger(rangers...)...)
}

func (this *{{$type.AliasType}}Slice) GetRaw() []{{$type.OrigType}} {
	return this.raw
}

func (this *{{$type.AliasType}}Slice) Filter(filters ...{{$type.AliasType}}Filter) *{{$type.AliasType}}Slice {

	res := Make{{$type.AliasType}}Slice(0, len(this.GetRaw()))

	this.Range(func(i int, val {{$type.OrigType}}) {
		for _, f := range filters {
			if f.Something()(i, val) {
				return
			}
		}
		res.Append(val)
	})

	return res
}

func (this *{{$type.AliasType}}Slice) FilterVal(filters ...{{$type.AliasType}}ValFilter) *{{$type.AliasType}}Slice {
	return this.Filter({{$type.AliasType}}ValFilterBatchTo{{$type.AliasType}}Filter(filters...)...)
}

func (this *{{$type.AliasType}}Slice) Map(mappers ...{{$type.AliasType}}Mapper) *{{$type.AliasType}}Slice {

	res := Make{{$type.AliasType}}Slice(0, len(this.GetRaw()))

	this.Range(func(i int, val {{$type.OrigType}}) {
		for _, f := range mappers {
			val = f.Something()(i, val)
		}
		res.Append(val)
	})

	return res
}

func (this *{{$type.AliasType}}Slice) MapVal(mappers ...{{$type.AliasType}}ValMapper) *{{$type.AliasType}}Slice {
	return this.Map({{$type.AliasType}}ValMapperBatchTo{{$type.AliasType}}Mapper(mappers...)...)
}

// let it crash apis
func (this *{{$type.AliasType}}Slice) First() {{$type.OrigType}} {
	return this.At(0)
}

func (this *{{$type.AliasType}}Slice) Last() {{$type.OrigType}} {
	return this.At(this.Len() - 1)
}

func (this *{{$type.AliasType}}Slice) Ats(is ...int) *{{$type.AliasType}}Slice {
	res := Make{{$type.AliasType}}Slice(0, len(is))
	for _, i := range is {
		res.Append(this.At(i))
	}
	return res
}

func (this *{{$type.AliasType}}Slice) Slice(left, right int) *{{$type.AliasType}}Slice {
	return Make{{$type.AliasType}}SliceFromRaw(this.GetRaw()[left:right])
}

func (this *{{$type.AliasType}}Slice) At(i int) {{$type.OrigType}} {
	return this.GetRaw()[i]
}

func (this *{{$type.AliasType}}Slice) Len() int {
	return len(this.GetRaw())
}

func (this *{{$type.AliasType}}Slice) Cap() int {
	return cap(this.GetRaw())
}


{{end}}
{{end}}