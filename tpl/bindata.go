// Code generated by go-bindata.
// sources:
// tpl/func.gogo
// tpl/header.gogo
// tpl/include.gogo
// tpl/slice.gogo
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplFuncGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xcd\x4a\xc3\x40\x10\x3e\x67\x9e\x62\x28\x1e\x92\x83\x7d\x00\x21\x87\x5e\xbc\x89\xa0\xbe\x40\x34\x93\xb8\xb0\xdd\x94\xdd\xed\xa1\x0c\xf3\xee\xb2\x99\x8d\x52\xed\x26\x08\x39\x84\xf9\x66\xbe\x7c\x3f\x84\xb9\xa7\xc1\x38\xc2\xdd\x70\x76\x1f\x3b\x11\x00\xe6\x7b\xf4\x9d\x1b\x09\xef\xe2\xe5\x44\xf8\xd0\xe2\xfe\x60\xed\xdb\xe5\x44\x41\x04\xe6\x19\xf3\x8c\xed\x0f\xd6\x74\x21\x21\x22\x8f\xc6\x46\xf2\x98\x68\xea\x05\x7e\xf6\x66\x54\xb4\xc1\xf7\x69\xb2\xc5\xe3\x27\x72\xfd\xda\xf1\xdf\x59\x91\xea\x25\x49\x2f\x53\x01\x24\x04\xeb\x41\xe5\x16\x8d\x34\xf8\x3a\x1d\x29\x7e\x1a\x37\xd6\xcd\x8a\x5f\x86\xca\x0c\x98\xd9\xda\x16\x9d\xb1\x69\x56\x79\x8a\x67\xef\xd6\xe3\x98\x17\xbf\x37\x3b\x1b\x08\xaa\x4a\x20\x3d\xcb\x70\xe6\x05\x59\x54\x1f\x35\xa7\x62\x82\x9b\xaa\x73\xd0\xaa\x3a\xb3\x15\x54\x87\xe8\x6f\xe4\x7e\xab\x8b\x2b\x1f\x21\xfa\xdf\x2e\xf4\x3b\x3f\x2e\xbc\x56\x54\x2c\x6f\xd3\x45\xee\x58\x5d\x64\xb6\x7f\x64\xcf\x57\xea\xf4\x1e\x04\x98\xc9\xf5\xe9\x0f\x80\xe5\xf5\x2b\x00\x00\xff\xff\xbf\x83\x61\x9c\x1e\x03\x00\x00")

func tplFuncGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplFuncGogo,
		"tpl/func.gogo",
	)
}

func tplFuncGogo() (*asset, error) {
	bytes, err := tplFuncGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/func.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplHeaderGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x51\x0a\xc2\x40\x0c\x05\xff\xf7\x14\x61\x0f\x60\x6f\xe1\x3d\xd2\xe4\xb5\x2e\xac\x51\xea\xe6\x43\x42\xee\x2e\x15\x15\x8a\xbf\x33\xc3\x44\x28\x96\x66\xa0\x7a\x01\x2b\xb6\x9a\x59\x4a\xc4\xc0\xf5\xde\x79\x80\x6a\x33\xe9\xae\xa8\x74\xa2\xcc\x32\x4d\xc4\x3e\x6e\xb4\xc2\xb0\xed\x7e\x7e\xd2\xcc\x6b\xd9\xc5\x8f\x3d\x7a\x13\x1c\x26\x6f\xf2\x59\xfc\xa7\x67\x37\x39\xe4\x8b\x9b\x7c\xeb\x08\x98\x66\xbe\x02\x00\x00\xff\xff\x1b\xea\xee\xfc\xa8\x00\x00\x00")

func tplHeaderGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplHeaderGogo,
		"tpl/header.gogo",
	)
}

func tplHeaderGogo() (*asset, error) {
	bytes, err := tplHeaderGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/header.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplIncludeGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\x4b\xce\x29\x4d\x49\x55\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\x4a\x4c\xe7\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\x82\x06\x94\x73\x28\x00\x00\x00")

func tplIncludeGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplIncludeGogo,
		"tpl/include.gogo",
	)
}

func tplIncludeGogo() (*asset, error) {
	bytes, err := tplIncludeGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/include.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplSliceGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x2a\xce\xc9\x4c\x4e\x55\xaa\xad\xe5\xe2\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\x83\x56\x19\x27\x1b\x00\x00\x00")

func tplSliceGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplSliceGogo,
		"tpl/slice.gogo",
	)
}

func tplSliceGogo() (*asset, error) {
	bytes, err := tplSliceGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/slice.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/func.gogo": tplFuncGogo,
	"tpl/header.gogo": tplHeaderGogo,
	"tpl/include.gogo": tplIncludeGogo,
	"tpl/slice.gogo": tplSliceGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"func.gogo": &bintree{tplFuncGogo, map[string]*bintree{}},
		"header.gogo": &bintree{tplHeaderGogo, map[string]*bintree{}},
		"include.gogo": &bintree{tplIncludeGogo, map[string]*bintree{}},
		"slice.gogo": &bintree{tplSliceGogo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

