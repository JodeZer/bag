// Code generated by go-bindata.
// sources:
// tpl/func.gogo
// tpl/header.gogo
// tpl/slice.gogo
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplFuncGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x3d\x6e\xc3\x30\x0c\x85\x67\xf3\x14\x44\x26\x7b\xc9\x0d\xb2\x76\xeb\xd2\x9f\x03\x28\x31\xed\x0a\x55\x64\x41\x56\x86\x80\xe0\xdd\x0b\x85\x4a\x8a\xb4\x6c\x0a\x68\x10\x9e\xf8\x1e\x3e\x3e\x31\x8f\x34\xf9\x48\xb8\x99\x4e\xf1\xb0\x11\x01\x80\xe4\x0e\x9f\x6e\x26\xdc\xbb\x19\xa0\x9c\x13\x21\xf3\xf6\x3d\x25\xca\x6f\xe7\x44\x22\x4f\x3e\x14\xca\x58\x0d\x3d\xf3\x56\xc5\x01\xf7\xcb\x12\xac\xf1\x67\x8a\xa3\x31\x7e\xbb\x5a\x9e\x17\x17\xe7\xdf\x1e\x80\x2a\x60\x3f\x29\x80\x45\x35\xe0\xeb\x72\xa4\xf2\xe1\xe3\xdc\x0f\x36\x37\x43\xe7\x27\x6c\x19\xbb\x1d\x46\x1f\xaa\xd6\x65\x2a\xa7\x1c\xcd\xb5\x2e\xef\xb7\x01\x17\x56\x82\xae\x13\xa8\xe7\x2a\x5e\xe2\x40\xae\x88\x47\x5d\xda\x6a\xe2\x11\x62\xeb\x4a\x11\x5b\xc6\x1f\x88\x6b\xc9\x68\xd5\x79\xc7\xba\x96\xfc\x93\x54\x53\xbf\x49\xb3\x56\x6d\xf5\xff\x88\xb4\xfd\x90\x92\xb6\x8c\xff\xcb\xe4\x3b\x14\xb5\x55\x14\x60\xa6\x38\x8a\x7c\x05\x00\x00\xff\xff\x26\xd5\xe4\x59\x8f\x02\x00\x00")

func tplFuncGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplFuncGogo,
		"tpl/func.gogo",
	)
}

func tplFuncGogo() (*asset, error) {
	bytes, err := tplFuncGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/func.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplHeaderGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\x41\x0a\xc2\x40\x0c\x85\xe1\x7d\x4e\x11\x72\x00\x7b\x0b\xef\x91\x66\x5e\xc7\x62\x8d\xa5\xce\x2c\x24\xe4\xee\x52\xc1\x82\x74\xfb\xbf\x8f\x17\x51\x30\xcd\x0e\x96\x1b\xb4\x60\x93\x4c\xa2\x55\xed\xae\x15\x3c\x6a\x25\x1a\x06\xd6\xde\x9e\x5c\xe1\xd8\xb4\x81\xc7\xf7\x31\x1c\xed\xb5\xcc\x06\x8a\x68\x78\xac\xcb\x1e\xe4\x5b\x84\x2f\xbc\x1f\x9e\xe8\xb5\xbb\xfd\xf1\xa9\xbb\xfd\x74\x04\xbc\x64\x7e\x02\x00\x00\xff\xff\x2c\xb6\x27\x87\x9b\x00\x00\x00")

func tplHeaderGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplHeaderGogo,
		"tpl/header.gogo",
	)
}

func tplHeaderGogo() (*asset, error) {
	bytes, err := tplHeaderGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/header.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplSliceGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x2a\xce\xc9\x4c\x4e\x55\xaa\xad\xe5\xe2\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\x83\x56\x19\x27\x1b\x00\x00\x00")

func tplSliceGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplSliceGogo,
		"tpl/slice.gogo",
	)
}

func tplSliceGogo() (*asset, error) {
	bytes, err := tplSliceGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/slice.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/func.gogo": tplFuncGogo,
	"tpl/header.gogo": tplHeaderGogo,
	"tpl/slice.gogo": tplSliceGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"func.gogo": &bintree{tplFuncGogo, map[string]*bintree{}},
		"header.gogo": &bintree{tplHeaderGogo, map[string]*bintree{}},
		"slice.gogo": &bintree{tplSliceGogo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

