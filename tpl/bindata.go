// Code generated by go-bindata.
// sources:
// tpl/func.gogo
// tpl/header.gogo
// tpl/include.gogo
// tpl/slice.gogo
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplFuncGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x96\xc1\x6a\xdc\x30\x10\x86\xcf\xd6\x53\x0c\xa1\x07\x1b\x5c\xe7\x1e\x10\x24\x3d\x14\x7a\x28\x2d\x6d\xd8\x4b\x29\x45\x9b\x95\x37\xa6\x5a\x79\xb1\xbd\xa1\xc1\xf8\xdd\x8b\x3c\x92\x57\x6e\x2d\x4b\xda\x85\x16\x02\x21\xf2\x78\x66\xfe\xf9\x3f\x65\xdc\xf7\x3b\x5e\x56\x92\xc3\x4d\x79\x92\x4f\x37\xc3\x40\x08\xe9\xfb\xb7\xd0\x30\xb9\xe7\xf0\xa6\x7b\x3d\x72\xb8\xa3\x50\x3c\x08\xf1\xf8\x7a\xe4\xad\x0a\xb8\xbd\x05\x76\xea\xea\x3d\x97\x70\xaf\x02\xee\xa0\xef\xc7\xc8\xe2\x53\x53\xed\x55\xd8\x30\x00\xdc\x33\x51\xb1\xf6\x73\xc3\xab\x5f\xe7\x80\x07\x75\x86\x11\x63\x1e\x4a\x29\x80\x4a\xc4\x1a\xce\xd4\x5f\x94\x92\xb1\xe6\xc2\x0b\xef\x2b\xd1\xf1\x06\x54\x9f\x69\x25\xbb\x7c\xa1\x6a\x06\xdb\xba\x16\xce\x0c\x1f\xd9\xf1\xe8\xcd\xf0\xf7\x99\x33\xdf\x17\x35\x24\x4f\x3e\x42\xd4\x63\x48\x4b\xec\xde\xa9\x2b\x83\xaf\xf5\x81\x77\xcf\x95\xdc\xa7\xd9\x8a\xfc\x9e\x24\x55\x09\x3a\x1b\xa5\x20\x2b\xa1\xce\x92\x86\x77\xa7\x46\x06\x4c\x67\x8c\x9e\xc2\x99\x68\x39\x49\x92\x81\xa8\x1f\x73\x38\x26\x27\x83\x69\xfd\x80\x63\x73\x0e\xd4\xdb\xba\x9e\x3b\xb6\xae\xb3\xb9\x5a\x87\xb1\xf9\x17\x26\x02\xcd\x99\xc9\x79\x61\xe2\x4f\x31\x58\xee\x2c\xa6\x41\xcf\x9c\x6e\x7a\xc5\x68\xd3\x51\x8c\xce\x16\xeb\x43\x3f\x6b\x11\x93\xa8\x16\x5d\xa0\x6d\x98\xb0\xe9\x8f\x06\x7f\xc3\x84\xcd\xfe\x95\xd8\x6f\x98\xb0\xc9\xbf\x08\xfa\x49\x91\x77\xde\x67\xed\x21\xe8\xff\x0b\xea\xa7\x69\x86\xf4\x1e\xc1\xfe\xff\x80\x7e\xf2\x32\x44\x4b\x04\xfa\x31\xd4\xe3\x1e\xa0\x70\xea\x2a\x31\xbe\xad\xdb\x5e\x6b\xe2\xb1\x76\x5e\xcd\x30\xb5\xab\x37\x3b\xe6\x3f\x92\x12\x3e\xbe\x58\x58\x03\x54\x5e\x66\x4a\xed\x10\xa0\xe5\x1d\xeb\x9e\x9e\xfd\x82\x5a\x28\x8a\x62\x5d\xd4\xb7\xef\x1e\x59\xad\x5a\xe6\x07\xf6\x93\xa7\x2b\xa1\x39\x08\x2e\x4d\xd1\x2c\x23\x49\x59\x37\xf0\x23\x37\x8e\xdf\x51\xfd\x75\x60\xda\x42\xef\x5b\xa0\xa0\xb0\x93\xbb\xb4\xe1\x6d\x7e\xa5\x7b\x59\x36\x63\x85\xb7\x9e\x49\xe2\x35\x5b\xcc\x8b\x8f\xc2\xee\xf3\xea\xf2\xba\x7e\x4f\xcd\xae\xe7\x05\xbc\x60\x2f\x6e\x5e\x66\x52\x57\x78\x31\x72\x17\x21\xb0\x05\x7b\x78\xc1\x50\xe4\x45\x17\xb5\x78\xd1\x13\x9f\x78\x31\x6d\xc5\xf0\x12\xea\x6b\x2c\x2f\xb8\x52\x16\xf3\xe2\xa3\xb0\xdd\xb5\xfa\x9d\x16\xc1\xcb\xb4\xa2\x66\xcb\xe8\x02\x42\xb0\xba\x9b\x90\x99\xb8\x15\x42\x8c\xc0\x45\xdb\x6d\x89\x1e\x42\x30\x14\x09\xd1\x45\x2d\x42\xf4\x8c\x27\x42\x4c\x5b\x31\x84\x84\x3a\x19\x45\xc8\x87\x32\x2d\xd1\x38\xf4\x26\x07\x96\xc3\x36\xe2\xaa\xab\x0f\x95\x34\xb3\x2d\x65\x76\xf9\xad\x2a\xde\xf7\x5c\xee\x86\xc1\xfc\xfe\x1d\x00\x00\xff\xff\x2f\xcd\xe6\x3e\x8b\x0d\x00\x00")

func tplFuncGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplFuncGogo,
		"tpl/func.gogo",
	)
}

func tplFuncGogo() (*asset, error) {
	bytes, err := tplFuncGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/func.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplHeaderGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x51\x0a\xc2\x40\x0c\x05\xff\xf7\x14\x61\x0f\x60\x6f\xe1\x3d\xd2\xe4\xb5\x2e\xac\x51\xea\xe6\x43\x42\xee\x2e\x15\x15\x8a\xbf\x33\xc3\x44\x28\x96\x66\xa0\x7a\x01\x2b\xb6\x9a\x59\x4a\xc4\xc0\xf5\xde\x79\x80\x6a\x33\xe9\xae\xa8\x74\xa2\xcc\x32\x4d\xc4\x3e\x6e\xb4\xc2\xb0\xed\x7e\x7e\xd2\xcc\x6b\xd9\xc5\x8f\x3d\x7a\x13\x1c\x26\x6f\xf2\x59\xfc\xa7\x67\x37\x39\xe4\x8b\x9b\x7c\xeb\x08\x98\x66\xbe\x02\x00\x00\xff\xff\x1b\xea\xee\xfc\xa8\x00\x00\x00")

func tplHeaderGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplHeaderGogo,
		"tpl/header.gogo",
	)
}

func tplHeaderGogo() (*asset, error) {
	bytes, err := tplHeaderGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/header.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplIncludeGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x31\x0a\x02\x31\x10\x85\xe1\x7e\x4e\x31\x84\x2d\x14\xd4\x03\x08\x1e\xc0\xce\x2b\xc4\xcd\x38\x84\x8d\x63\x58\x4d\xf5\x78\x77\x17\x15\xbb\xbf\xf8\x7e\xa0\xd8\xad\x86\x69\xaa\x31\xb7\x51\x2c\x91\xd2\xf3\xbc\x64\x37\xbd\x66\x17\xa9\xf7\xfe\x58\x5f\xba\x11\x60\xaf\x6b\x0e\x37\x9d\xfa\xe2\x3b\x9d\x62\xb4\xa6\xc7\x93\x1e\xce\x5f\x72\xf9\x5d\x4f\x52\x12\xf0\x31\x64\x12\x01\x2c\x0a\x29\xdb\x7f\xbd\x03\x00\x00\xff\xff\xa4\x19\x1e\x1b\x73\x00\x00\x00")

func tplIncludeGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplIncludeGogo,
		"tpl/include.gogo",
	)
}

func tplIncludeGogo() (*asset, error) {
	bytes, err := tplIncludeGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/include.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplSliceGogo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xd1\x6b\xdb\x3e\x10\x7e\xb6\xfe\x8a\x23\xfc\xf8\x21\x0d\xd7\x49\xf3\x18\xf0\x68\x36\xe8\x18\x34\x6c\xb4\x25\x2f\x25\x0c\xe1\xca\x89\xa8\xa3\x18\x59\x59\x56\x5c\xff\xef\xe3\xa4\x38\xb1\x17\xdb\xb5\x61\x0f\x7b\x4a\xb0\x4e\x77\xdf\xf7\xdd\x77\x67\xe7\xf9\xb3\x88\xa5\x12\x30\xca\x12\x19\x89\x51\x51\x10\x92\xe7\x57\xa0\xb9\x5a\x0b\xf8\xcf\xbc\xa6\x02\x66\x21\x04\xf3\x24\x79\x7c\x4d\x45\x86\xe7\xe3\x31\xf0\xbd\xd9\xad\x85\x82\x1b\x0c\x98\x41\x9e\xdb\xc8\xe0\x9b\x96\x6b\x0c\x2b\x0a\x80\x1b\x9e\x48\x9e\x7d\xd7\x42\xfe\x3a\x07\xcc\xf1\x99\x8b\x20\xc4\x26\x6f\x38\x79\x40\x24\x90\x19\xbd\x8f\x0c\xe4\xc4\xd3\xfc\x00\x4f\xab\xcb\x1a\xa4\x20\x24\xde\xab\x08\x16\xfc\x45\xb4\xe5\xa1\x29\xd7\x7c\x0b\x41\x10\x48\x65\x18\x7c\x68\xad\x97\x13\x4f\xc6\x90\x08\xe5\x6e\x30\xf8\x08\x53\x78\x7b\xab\x3e\x09\x43\x98\x60\x9c\x97\x72\x25\x23\x3a\x8a\xf7\xd1\x0b\xec\x47\x8c\x78\x05\xf1\xd2\x6b\x1f\xd2\x29\x8a\x65\xa3\x9f\x26\x2b\xff\xf4\xef\xcf\xd4\x61\x08\x53\x97\x68\x0a\x65\xfc\xf5\xca\xa6\xd1\xc2\xec\xb5\x82\xff\xdb\x70\xe2\x2d\xcd\x0f\x33\xd8\xf2\x17\x41\x9b\x64\xf1\xc1\x41\x61\x3e\x26\xec\xa3\xd1\xad\xde\x6d\xef\xf9\x81\xb6\x09\xfd\xbe\x6c\x78\x33\x0c\x41\xc9\x04\x8e\x00\x21\xec\x42\x38\x61\xc3\xc8\x6a\x7e\xa8\xb1\xa1\x66\x23\xb3\x76\x54\x0c\xe6\x69\x2a\xd4\x33\xfd\xc9\x93\x0c\x7b\xdf\xc4\x29\x27\x1e\x66\x09\x1c\x58\xee\x2e\x94\x4f\x7c\xc0\xab\x41\x10\xb0\xa1\x35\x9d\xeb\xec\x34\x75\x05\xe7\xc4\xb3\x31\xc1\x3d\x4e\xda\x92\x27\x14\x8b\x20\xe0\x86\x69\xb2\xe1\x0e\xed\x99\x18\x4a\x38\x18\xdd\xd7\x98\xc6\x32\x31\x42\x37\x0d\xde\xad\x3d\x71\xd4\xdf\x53\xad\x4a\xb6\x8f\xb7\x30\x27\x0b\x5c\x85\x23\x04\x36\x00\xbd\x55\x89\xda\xad\xa4\x6b\xd8\x2a\xa1\x36\x46\x5b\x88\xf1\x4e\xc3\x0f\xdf\x6d\x31\x8d\x33\xe9\xf6\x59\x79\x1f\xd5\xc4\x10\x69\xb9\x9e\xcf\x2d\xb3\x2f\xc2\x20\x60\xa7\xb9\xe7\xae\x04\x0f\xbb\xad\x30\x1b\xa9\xd6\x94\x51\x77\x8b\x11\x0f\x2d\x3c\xc0\x93\xa7\x4e\x77\xd3\x58\xf2\xa4\xc2\xc4\x42\x72\xec\xbb\x62\x3f\x71\x13\x6d\x1e\x77\xad\xaa\x94\x35\xd1\xd1\xc3\x5c\x7d\x92\xa3\x69\x92\xed\x7a\x76\x43\x5c\x4e\x4e\xff\xcc\x35\x33\xb4\xa9\xe1\x82\xba\x37\x10\x62\xc8\xb0\x8b\x9d\x2f\x82\x89\x6f\x57\x70\xad\xc7\x8c\x91\x9a\xc4\x76\x06\x25\x48\x65\x9c\x33\xda\x46\xf1\xe8\xaf\xf8\x6c\x9d\x92\x85\x35\x8d\x8c\x21\x6e\xb2\x8c\x3b\x3d\x2a\x86\x7f\x0b\x67\x22\xc4\x7f\x31\xd9\x27\x65\xb5\xc8\x86\x8a\x6a\xf7\x49\xa7\xae\x4b\x9e\xf4\x91\xb6\xd6\xdd\x63\xc3\xba\xb2\xb5\xfb\xb0\xde\xed\xe1\x3e\x5c\xf0\x94\x6e\x71\x4b\xb7\x52\x5a\xd8\xd3\x7f\xdf\x2a\x25\x0b\x6b\x06\xbc\x1a\x36\xbb\xe5\xaf\x7b\x63\xc1\x53\x34\x46\xb7\x8a\x4b\x9e\xf4\x11\xb2\x66\x0c\xec\x4d\x57\xaa\x76\x57\xb8\xf3\x12\x52\xd5\x15\xe3\x31\x24\xc2\x80\x34\x10\x69\x9e\x6d\x80\xa7\x32\xeb\x3d\x03\x3a\x33\xb8\xc0\xdf\xdd\x57\x73\x43\x27\x03\x3c\x78\xc7\xfb\xe7\xb5\xbf\x77\x42\x51\x06\x57\x70\x3d\xe4\x45\x6d\x32\x2a\xb3\x7e\x5f\xac\x03\xcc\x2c\x33\xc6\x4e\x2f\x46\x79\x76\xa3\x74\x46\xac\xb8\xac\x64\x20\x59\xed\x2b\x6d\x90\xd5\x5c\xe9\x44\xc4\xc6\x07\x2d\xd7\x1b\x03\x7d\xc8\xd8\x3a\x7d\xbe\x26\x6a\x93\xf9\x84\x65\x66\xb6\xca\x6a\x90\xce\x6e\x7c\xfb\xf4\xf3\x54\x4a\xae\x06\xb8\xc5\x36\x5f\x2a\x53\xc9\x76\xb9\x56\xfa\xe7\xfb\xcc\xd3\x8b\x7c\x11\x4f\x1b\xf2\x91\x3c\x17\xea\xb9\x28\xca\xdf\xdf\x01\x00\x00\xff\xff\x97\x02\x8b\x1c\xe6\x0d\x00\x00")

func tplSliceGogoBytes() ([]byte, error) {
	return bindataRead(
		_tplSliceGogo,
		"tpl/slice.gogo",
	)
}

func tplSliceGogo() (*asset, error) {
	bytes, err := tplSliceGogoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/slice.gogo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/func.gogo": tplFuncGogo,
	"tpl/header.gogo": tplHeaderGogo,
	"tpl/include.gogo": tplIncludeGogo,
	"tpl/slice.gogo": tplSliceGogo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"func.gogo": &bintree{tplFuncGogo, map[string]*bintree{}},
		"header.gogo": &bintree{tplHeaderGogo, map[string]*bintree{}},
		"include.gogo": &bintree{tplIncludeGogo, map[string]*bintree{}},
		"slice.gogo": &bintree{tplSliceGogo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

